; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --version 4
; RUN: opt < %s -passes=pgo-icall-prom -pass-remarks=pgo-icall-prom -S 2>&1 | FileCheck %s --check-prefixes=REMARK,ICALL-FUNC
; RUN: opt < %s -passes=pgo-icall-prom -pass-remarks=pgo-icall-prom -enable-vtable-cmp -icp-vtable-cmp-inst-threshold=4 -icp-vtable-cmp-inst-last-candidate-threshold=4 -icp-vtable-cmp-total-inst-threshold=4 -S 2>&1 | FileCheck %s --check-prefixes=REMARK,ICALL-VTABLE

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; REMARK: Promote indirect call to _ZN7Derived5func1Eii with count 900 out of 1600
; REMARK: Promote indirect call to _ZN4Base5func1Eii with count 700 out of 700

@_ZTV7Derived = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN7Derived5func1Eii] }, align 8, !type !15, !type !16, !type !17, !type !18
@_ZTV4Base = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN4Base5func1Eii] }, align 8, !type !15, !type !16

;.
; ICALL-FUNC: @_ZTV7Derived = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN7Derived5func1Eii] }, align 8, !type [[META0:![0-9]+]], !type [[META1:![0-9]+]], !type [[META2:![0-9]+]], !type [[META3:![0-9]+]]
; ICALL-FUNC: @_ZTV4Base = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN4Base5func1Eii] }, align 8, !type [[META0]], !type [[META1]]
;.
; ICALL-VTABLE: @_ZTV7Derived = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN7Derived5func1Eii] }, align 8, !type [[META0:![0-9]+]], !type [[META1:![0-9]+]], !type [[META2:![0-9]+]], !type [[META3:![0-9]+]]
; ICALL-VTABLE: @_ZTV4Base = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN4Base5func1Eii] }, align 8, !type [[META0]], !type [[META1]]
; ICALL-VTABLE: @_ZTV7Derived.icp.16 = alias ptr, getelementptr inbounds ({ [3 x ptr] }, ptr @_ZTV7Derived, i32 0, i32 0, i32 2)
; ICALL-VTABLE: @_ZTV4Base.icp.16 = alias ptr, getelementptr inbounds ({ [3 x ptr] }, ptr @_ZTV4Base, i32 0, i32 0, i32 2)
;.
define i32 @test_tail_call(ptr %ptr, i32 %a, i32 %b) {
; ICALL-FUNC-LABEL: define i32 @test_tail_call(
; ICALL-FUNC-SAME: ptr [[PTR:%.*]], i32 [[A:%.*]], i32 [[B:%.*]]) {
; ICALL-FUNC-NEXT:  entry:
; ICALL-FUNC-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[PTR]], align 8
; ICALL-FUNC-NEXT:    [[TMP0:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-FUNC-NEXT:    tail call void @llvm.assume(i1 [[TMP0]])
; ICALL-FUNC-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[VTABLE]], align 8
; ICALL-FUNC-NEXT:    [[TMP2:%.*]] = icmp eq ptr [[TMP1]], @_ZN7Derived5func1Eii
; ICALL-FUNC-NEXT:    br i1 [[TMP2]], label [[IF_TRUE_DIRECT_TARG:%.*]], label [[TMP4:%.*]], !prof [[PROF18:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ:
; ICALL-FUNC-NEXT:    [[TMP3:%.*]] = musttail call i32 @_ZN7Derived5func1Eii(ptr [[PTR]], i32 [[A]], i32 [[B]])
; ICALL-FUNC-NEXT:    ret i32 [[TMP3]]
; ICALL-FUNC:       4:
; ICALL-FUNC-NEXT:    [[TMP5:%.*]] = icmp eq ptr [[TMP1]], @_ZN4Base5func1Eii
; ICALL-FUNC-NEXT:    br i1 [[TMP5]], label [[IF_TRUE_DIRECT_TARG1:%.*]], label [[TMP7:%.*]], !prof [[PROF19:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ1:
; ICALL-FUNC-NEXT:    [[TMP6:%.*]] = musttail call i32 @_ZN4Base5func1Eii(ptr [[PTR]], i32 [[A]], i32 [[B]])
; ICALL-FUNC-NEXT:    ret i32 [[TMP6]]
; ICALL-FUNC:       7:
; ICALL-FUNC-NEXT:    [[CALL:%.*]] = musttail call i32 [[TMP1]](ptr [[PTR]], i32 [[A]], i32 [[B]])
; ICALL-FUNC-NEXT:    ret i32 [[CALL]]
;
; ICALL-VTABLE-LABEL: define i32 @test_tail_call(
; ICALL-VTABLE-SAME: ptr [[PTR:%.*]], i32 [[A:%.*]], i32 [[B:%.*]]) {
; ICALL-VTABLE-NEXT:  entry:
; ICALL-VTABLE-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[PTR]], align 8
; ICALL-VTABLE-NEXT:    [[TMP0:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-VTABLE-NEXT:    tail call void @llvm.assume(i1 [[TMP0]])
; ICALL-VTABLE-NEXT:    [[TMP1:%.*]] = icmp eq ptr [[VTABLE]], @_ZTV7Derived.icp.16
; ICALL-VTABLE-NEXT:    br i1 [[TMP1]], label [[IF_THEN_DIRECT_TAIL_CALL:%.*]], label [[IF_ELSE_ORIG_INDIRECT_CALL:%.*]], !prof [[PROF18:![0-9]+]]
; ICALL-VTABLE:       if.then.direct_tail_call:
; ICALL-VTABLE-NEXT:    [[TMP2:%.*]] = musttail call i32 @_ZN7Derived5func1Eii(ptr [[PTR]], i32 [[A]], i32 [[B]])
; ICALL-VTABLE-NEXT:    ret i32 [[TMP2]]
; ICALL-VTABLE:       if.else.orig_indirect_call:
; ICALL-VTABLE-NEXT:    [[TMP3:%.*]] = icmp eq ptr [[VTABLE]], @_ZTV4Base.icp.16
; ICALL-VTABLE-NEXT:    br i1 [[TMP3]], label [[IF_THEN_DIRECT_TAIL_CALL1:%.*]], label [[IF_ELSE_ORIG_INDIRECT_CALL2:%.*]], !prof [[PROF19:![0-9]+]]
; ICALL-VTABLE:       if.then.direct_tail_call1:
; ICALL-VTABLE-NEXT:    [[TMP4:%.*]] = musttail call i32 @_ZN4Base5func1Eii(ptr [[PTR]], i32 [[A]], i32 [[B]])
; ICALL-VTABLE-NEXT:    ret i32 [[TMP4]]
; ICALL-VTABLE:       if.else.orig_indirect_call2:
; ICALL-VTABLE-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[VTABLE]], align 8
; ICALL-VTABLE-NEXT:    [[CALL:%.*]] = musttail call i32 [[TMP5]](ptr [[PTR]], i32 [[A]], i32 [[B]])
; ICALL-VTABLE-NEXT:    ret i32 [[CALL]]
;
entry:
  %vtable = load ptr, ptr %ptr, !prof !19
  %0 = tail call i1 @llvm.type.test(ptr %vtable, metadata !"_ZTS4Base")
  tail call void @llvm.assume(i1 %0)
  %1 = load ptr, ptr %vtable
  %call = musttail call i32 %1(ptr %ptr, i32 %a, i32 %b), !prof !20
  ret i32 %call
}

declare i1 @llvm.type.test(ptr, metadata)
declare void @llvm.assume(i1)
define i32 @_ZN7Derived5func1Eii(ptr %this, i32 %a, i32 %b) {
; REMARK-LABEL: define i32 @_ZN7Derived5func1Eii(
; REMARK-SAME: ptr [[THIS:%.*]], i32 [[A:%.*]], i32 [[B:%.*]]) {
; REMARK-NEXT:  entry:
; REMARK-NEXT:    [[SUB:%.*]] = sub nsw i32 [[A]], [[B]]
; REMARK-NEXT:    ret i32 [[SUB]]
;
entry:
  %sub = sub nsw i32 %a, %b
  ret i32 %sub
}

define i32 @_ZN4Base5func1Eii(ptr %this, i32 %a, i32 %b) {
; REMARK-LABEL: define i32 @_ZN4Base5func1Eii(
; REMARK-SAME: ptr [[THIS:%.*]], i32 [[A:%.*]], i32 [[B:%.*]]) {
; REMARK-NEXT:  entry:
; REMARK-NEXT:    [[ADD:%.*]] = add nsw i32 [[B]], [[A]]
; REMARK-NEXT:    ret i32 [[ADD]]
;
entry:
  %add = add nsw i32 %b, %a
  ret i32 %add
}


!llvm.module.flags = !{!1}

!1 = !{i32 1, !"ProfileSummary", !2}
!2 = !{!3, !4, !5, !6, !7, !8, !9, !10}
!3 = !{!"ProfileFormat", !"InstrProf"}
!4 = !{!"TotalCount", i64 10000}
!5 = !{!"MaxCount", i64 200}
!6 = !{!"MaxInternalCount", i64 200}
!7 = !{!"MaxFunctionCount", i64 200}
!8 = !{!"NumCounts", i64 3}
!9 = !{!"NumFunctions", i64 3}
!10 = !{!"DetailedSummary", !11}
!11 = !{!12, !13, !14}
!12 = !{i32 10000, i64 100, i32 1}
!13 = !{i32 990000, i64 100, i32 1}
!14 = !{i32 999999, i64 1, i32 2}
!15 = !{i64 16, !"_ZTS4Base"}
!16 = !{i64 16, !"_ZTSM4BaseFiiiE.virtual"}
!17 = !{i64 16, !"_ZTS7Derived"}
!18 = !{i64 16, !"_ZTSM7DerivedFiiiE.virtual"}
!19 = !{!"VP", i32 2, i64 1600, i64 13870436605473471591, i64 900, i64 1960855528937986108, i64 700}
!20 = !{!"VP", i32 0, i64 1600, i64 7889036118036845314, i64 900, i64 10495086226207060333, i64 700}
;.
; ICALL-FUNC: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; ICALL-FUNC: attributes #[[ATTR1:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
;.
; ICALL-VTABLE: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; ICALL-VTABLE: attributes #[[ATTR1:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
;.
; ICALL-FUNC: [[META0]] = !{i64 16, !"_ZTS4Base"}
; ICALL-FUNC: [[META1]] = !{i64 16, !"_ZTSM4BaseFiiiE.virtual"}
; ICALL-FUNC: [[META2]] = !{i64 16, !"_ZTS7Derived"}
; ICALL-FUNC: [[META3]] = !{i64 16, !"_ZTSM7DerivedFiiiE.virtual"}
; ICALL-FUNC: [[META4:![0-9]+]] = !{i32 1, !"ProfileSummary", [[META5:![0-9]+]]}
; ICALL-FUNC: [[META5]] = !{[[META6:![0-9]+]], [[META7:![0-9]+]], [[META8:![0-9]+]], [[META9:![0-9]+]], [[META10:![0-9]+]], [[META11:![0-9]+]], [[META12:![0-9]+]], [[META13:![0-9]+]]}
; ICALL-FUNC: [[META6]] = !{!"ProfileFormat", !"InstrProf"}
; ICALL-FUNC: [[META7]] = !{!"TotalCount", i64 10000}
; ICALL-FUNC: [[META8]] = !{!"MaxCount", i64 200}
; ICALL-FUNC: [[META9]] = !{!"MaxInternalCount", i64 200}
; ICALL-FUNC: [[META10]] = !{!"MaxFunctionCount", i64 200}
; ICALL-FUNC: [[META11]] = !{!"NumCounts", i64 3}
; ICALL-FUNC: [[META12]] = !{!"NumFunctions", i64 3}
; ICALL-FUNC: [[META13]] = !{!"DetailedSummary", [[META14:![0-9]+]]}
; ICALL-FUNC: [[META14]] = !{[[META15:![0-9]+]], [[META16:![0-9]+]], [[META17:![0-9]+]]}
; ICALL-FUNC: [[META15]] = !{i32 10000, i64 100, i32 1}
; ICALL-FUNC: [[META16]] = !{i32 990000, i64 100, i32 1}
; ICALL-FUNC: [[META17]] = !{i32 999999, i64 1, i32 2}
; ICALL-FUNC: [[PROF18]] = !{!"branch_weights", i32 900, i32 700}
; ICALL-FUNC: [[PROF19]] = !{!"branch_weights", i32 700, i32 0}
;.
; ICALL-VTABLE: [[META0]] = !{i64 16, !"_ZTS4Base"}
; ICALL-VTABLE: [[META1]] = !{i64 16, !"_ZTSM4BaseFiiiE.virtual"}
; ICALL-VTABLE: [[META2]] = !{i64 16, !"_ZTS7Derived"}
; ICALL-VTABLE: [[META3]] = !{i64 16, !"_ZTSM7DerivedFiiiE.virtual"}
; ICALL-VTABLE: [[META4:![0-9]+]] = !{i32 1, !"ProfileSummary", [[META5:![0-9]+]]}
; ICALL-VTABLE: [[META5]] = !{[[META6:![0-9]+]], [[META7:![0-9]+]], [[META8:![0-9]+]], [[META9:![0-9]+]], [[META10:![0-9]+]], [[META11:![0-9]+]], [[META12:![0-9]+]], [[META13:![0-9]+]]}
; ICALL-VTABLE: [[META6]] = !{!"ProfileFormat", !"InstrProf"}
; ICALL-VTABLE: [[META7]] = !{!"TotalCount", i64 10000}
; ICALL-VTABLE: [[META8]] = !{!"MaxCount", i64 200}
; ICALL-VTABLE: [[META9]] = !{!"MaxInternalCount", i64 200}
; ICALL-VTABLE: [[META10]] = !{!"MaxFunctionCount", i64 200}
; ICALL-VTABLE: [[META11]] = !{!"NumCounts", i64 3}
; ICALL-VTABLE: [[META12]] = !{!"NumFunctions", i64 3}
; ICALL-VTABLE: [[META13]] = !{!"DetailedSummary", [[META14:![0-9]+]]}
; ICALL-VTABLE: [[META14]] = !{[[META15:![0-9]+]], [[META16:![0-9]+]], [[META17:![0-9]+]]}
; ICALL-VTABLE: [[META15]] = !{i32 10000, i64 100, i32 1}
; ICALL-VTABLE: [[META16]] = !{i32 990000, i64 100, i32 1}
; ICALL-VTABLE: [[META17]] = !{i32 999999, i64 1, i32 2}
; ICALL-VTABLE: [[PROF18]] = !{!"branch_weights", i32 900, i32 700}
; ICALL-VTABLE: [[PROF19]] = !{!"branch_weights", i32 700, i32 0}
;.
